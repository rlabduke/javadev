==============================================================================
===  TO DO  ==================================================================
==============================================================================
    Handle captions?
    Make thin line->multiwidth->onewidth conform to Mage?
    Add 'sphere' option to BallPoint
    Add ability to write @hsvcolor entries, @colorset entries
    Add ability to edit masters
    Support @pdbfile and @command
    Implement the 'instance= {x}' feature of Mage?
    Allow applet to specify non-std config file URL
    Add ability to create/edit colors
    Add notes on color usage to palette(s)
    Allow editing of all points below a given group/subgroup/list.
        eg: wipe out all point colors, move all pt colors to aspects
    Add +/- 90 rotation buttons to some tool
    Add "don't ask me again" boxes to warning messages
    Devise better lighting model for ribbons
    Make Find ignore points that have the invisible aspect (Z) active
    Add setMnemonic, setAccelerator, setTooltip, etc. to ReflectiveAction
    Implement docking (multi point LSQ -- dialog box w/ 2 lists?)
    Develop "xkn" file specification / DTD / Schema
    Add SVG export (Batik)
    Refactor kinemage parsing code to be more comprehensible
    Consider defining an UberPoint interface to simplify parsing code
    Tools need to get events from KingMain?
    Add custom mouse cursors using java.awt.Toolkit.createCustomCursor?
    Add more tooltips where appropriate
    Mage-like measures
    Auto file name mangling and *.ki{n,p,p1,p2,p3,...} file mask
    Add Backrub tool
    
==============================================================================
===  CHANGE LOG  =============================================================
==============================================================================

### 0.32 ###
- fixed fencepost bug in driftwood.isosurface that was causing ArrayIndexOOBEx
- fixed RecursivePointIterator.nextImpl() to skip over points/lists/groups that
  are turned off, or in the case of points, unpickable
- fixed bug that wrote version and buildnum to ~/.king_prefs
- changed README, LICENSE, and BUILDME to HTML
  This avoid translation among LF, CR, and CRLF line endings and provides a
  "friendlier" user experience.
- updated manual (PDF and HTML)
- updated main logo to reflect URL, (C) 2003, bigger (400x400)
- modification to whole words to make word break more stringent
  break is now on space, comma, semi-colon, or colon ONLY
- Find Next now checks to make sure the points it finds are totally visible

### 0.31 ###
- improved map file selection process with better filters
- migrated to building with Apache Ant (ant.apache.org)
- initial window size now depends on screen resolution
- added "Smooth graphics" (anti-aliasing) as a graphics option
- fixed a bug where exported map lists didn't know their owners
- made ReflectiveAction report source of InvocationTargetException rather than ITEx itself
- commented out an error message from KinParser (displayed when it hits 2animate, etc)
- FIRST PUBLIC DISTRIBUTION!!!

### 0.30 ###
- moved TablePane to driftwood.gui and fixed multi-row problems with it
- created File | Export menu and moved XML to it
- registered up/down arrow keys as equivalent to mouse wheel
- all mouse drags can now make vertical/horizontal distinction like zoom/clip
- restored HighlighterTool (now named EmphasisTool)
- started work on ED Map tool
- wrote KingEdgePlotter to create isosurfaces directly from MeshMarchingCubes
- wrote EDMapWindow to display each loaded map
- completed EDMapTool
- bugfix: Engine reported out-of-bounds pick on empty window

### 0.29 ###
- massive refactoring of tool archtecture that should result in much
  cleaner behavior by tools.
- at the moment, only basic tool is available
  (no highlighter or contact map tool)
- text window open at startup is now a preference
- using Explore | Find point is now just like picking the point
- changed Marker rendering and choose new markers for measures
- added HTML help for each tool
- now using radio buttons for tool selection in Toolbox
- bundled gnu.regexp into king.jar -- eliminated dependence on lib/*
- flatland is now a kinemage property
- toolbox opens at startup by default (configurable)
- rotate/scale now done either around object centroid or (0,0,0)
- writing points now writes {"} when appropriate
- added Edit Props tool and "unpickable" in point editor
- added falling bear to internal kinemages

### 0.28 ###
- started working on parser: 26.5 sec
- using my own char buffer instead of StringBuffer: 25.4 sec
- using my parseDouble instead of Double.parseDouble: 27.4 sec (!)
- creating Strings takes about 40% of the total time,
  parsing doubles takes about 30% of the total time.
- numeric tokens (doubles) are about 60% of all tokens
- therefore, there's a potential for parsing in about half the time
  Mage loads this file in < 15 sec
- my rewritten parser for better doubles: 79 sec (!)
  how am I making this so much worse?
- some logic errors caused lots of exceptions being raised
  now time is down to 19.6 sec
- found one leak in UIMenus.rebuildAnimationsMenu()
- found another in KinReader.install() (kinList was preserved!)
- found another in JComboBox.removeAllItems() (reported to Sun)
- replaced two pane text edit window with the simpler, text-only version
- merge (-m) is default command line behavior when two or more files are specified
- can use (-s, -single) to open kinemages individually
- fixed a bug in KinReader I introduced when hunting memory leaks;
  it caused open-merge to fail on the second kinemage
- updated documentation to reflect changes in 0.28

### 0.27 ###
- enabled File | Configure for applet
- updated documentation (minimal coverage of new features)
- fixed fwd-back-fwd-back bug in HTML help
- added HSV color cone to list of internal kinemages
- changed mnemonic for Modify menu from T (Tree) to M
- made some changes to KinParser to eliminate some NumberFormatExceptions
- added auto-detection and decompression of gzipped kinemage files

### 0.26 ###
- added ability to edit points; splits lists at a point;
  and edit the list, subgroup, and group a point belongs to.
- added ability to merge lists (simpleminded)
- made delete Kinemage have same effect as File | Close current
- added stereo, including menu options and config option
- added ability to transform groups, subgroups, lists, etc.
  Operations are rotate, translate, and scale.
- fixed minor bug in saving views: matrix would sometimes write sci. not.
- created TablePane and used it to re-write the layout of PointEditor
- kinemage-specified display properties are now always set,
  except for cueThickness, which defaults to false for all kinemages in KiNG.
- changed Find functionality to operate like Mage, with Find/Find next

### 0.25 ###
- this version is for stabilization before release...
- changed big markers key to W (Jane)
- changed green and lime color defs slightly
- updated palette kinemage
- put gray background behind explore/modify tabs
- changed pinwheel hotzone to top 1/6 of screen;
  (unused) zone at bottom is also now 1/6 of screen.
- fixed bug in whitebg color creation (bad coefficients)
- adjusted colors extensively, esp. on white background
- removed configuration of some things (buttons, etc)
- text window no longer jumps to center, unless it's been closed
- font magnification is a bitch to set after we've created a GUI
- created GUI for changing preferences and saving them
- made "Big markers" and "Big labels" separate controls
- markers can't depth-cue b/c they use multiple colors as it is
- added HTML documentation of keyboard shortcuts

### 0.24 ###
- improved handling of animate/2animate while still maintaining the
  general purpose facility for animations. Groups were also labeled
  with * and/or % as appropriate.
- rearranged layout of controls, added tooltips to a few
- changed Move & Measure right mouse button to always
  zoom AND slab, but only one or the other per click-n-drag session.
- removed label box; all drawing is now done directly on graphics area.
- added implementation of aspects
- did minor updates for user guide
- added dialog to edit views (rename, delete, reorder)
- upgraded KingPrefs to be descended from Props
- added a tip of the day to the controls panel (optional)
- added Auto-animate feature (configurable timing)
- added font-size preferences
- added Home and Back buttons to the Help browser
- added Auto-rock to Display menu (variable timing, in .king_prefs)
- made text window open automagically by default (configurable)
- made GridBagPanel easier to use (?)
- added ability to edit list width and radius
- added hooks for arrow keys and mouse wheel into tool archetecture
- changed references to XknWriter to be reflective, so XML libraries
  won't be loaded across the network for applets.

### 0.23 ###
- finally solved the JTree Ctrl-X, Ctrl-V mystery -- those keys
  were bound in a parent map of the JTree InputMap.
- added "merge (sub)groups" behavior to paste command
- masters are now properties of groups, subgroups, lists.
  This will facilitate cut-and-paste between kinemages.
- added quoting of < > & in kinemage text for proper HTML display
- masters now start on/off based on whether they have any targets that are on.
  This includes pointmasters, a feature Dave has been requesting.
- added support for @whiteback, @onewidth, @thinline, @perspective
- put clipping on a linear scale 0-800, like in Mage
- reworked views to be span-based, so that views are stable
  even through kinemage merges, etc.
- added ability to edit kinemage properties (@onewidth, etc.)
- renamed Edit menu to Explore; Tree menu to Modify

### 0.22 ###
- restored the ability to write XML, with class XknWriter
- replaced Enumerator with Collections.enumeration()
- improved the highlighter tool
- increased default size of graphics area
- rearranged some elements of the UI to suit Jane

### 0.21 ###
- came up with good formulas for colors on a white background
- replaced Colorset class with functions in ColorManager
- use HSV color palette all the time, for all kinemages
- added point color to output kinemages
- made left/right arrow keys do rotation about Y-axis for Bryan (KinCanvas)
- added Highlighter tool for use with Chiropraxis solutions
- added ability to set font magnification in .king_prefs
- fixed bug with monochrome option that caused invisble things to be shown
- fixed markers in MMTool

### 0.20 ###
- began re-organizing kin/group/subgroup/list/point class hierarchy --
  groups and subgroups are now distinct classes that can't be nested
  arbitrarily
- began creating sub-packages
- decided to organize files into directories but not use additional packages
- made search, kin writing work as external iterators
- improved color/palette system
- added internal palette kinemage to Help menu (like Mage)
- added ability to edit groups/subgroups/lists (including list color)

### 0.18 ###
- made balls write out their individual radii

### 0.17 ###
- added nohilite (nohighlight) tag to balllists
- tried to make point ID the contents of the <t> tag (undid it -- no good)
- created Palette to replace MagePaints
- added keyword @hsvcolor {name} hue_0-360 [saturation_0-100 [value_0.0-1.0]]
- removed jump-to-letter from kinemage tree display
- added Properties to tree edit menu
- added cut/paste to tree menu
- added up/down to tree menu
- added ability to create new groups from the tree

### 0.16 ###
- made KiNG start in current directory instead of home directory
- created ContactMapTool and adapted it to MolProbity
- fixed sign/handedness problem for dihedral measures in MMTool
- restored "Set Center" to "Pick Center" in KinCanvas, KingPrefs
- decided to keep XML and keep/adapt ContactMapTool
- changed <p> tags to <t> tags in KingPoint.emitXML
- other small XML changes to more closely match kinemage format
- added ability to rename groups from the tree
- can write out @animations but XML will crash with old-style 'animate' group flag
- made masters the only legal target for AnimateGroups;
  custom masters are now created on input to control 'animate' groups.

### 0.15 ###
- started adding ability to write XML
- KiNG can now write out its entire data structure (except animations!) as XML
- KiNG can also write out its entire data structure in kinemage format, except animations
- improved ability to read old kins without point IDs (WorldMap.kin) -- still not perfect
- fixed printing to match resolution of graphics area -- now more WYSIWYG
- added pretty printing to VectorPoint and DotPoint
- fixed bugs in kinemage writing code
- added ability for groups to write animate/2animate attribute to kinemage
- added warning before overwriting existing files
- reworked the tool architechture, with dynamic loading and @kingtool keyword
- added @flat[land] keyword and tool
- fixed text propagation, so re-writes get saved to disk
- added ability to open multiple windows
- fixed bug in KinTree.onDelete that caused reloading of model
- added ability to configure via .king_prefs file in home directory,
  including ability to create this file for the user.
- added ability to save views to the Views menu

### 0.14 ###
- changed EM_ON_OFF to EM_EDIT_GROSS in KinTree.onDelete()
- made printing visible to applets (asks user for permission)
- distinguished b/t "Close" and "Close All" -- this will matter for authorship (maybe?)
- added reference to host applet in KingMain, to enable future interaction w/ browser
- updated user manual with Saving & Printing

### 0.13 ###
- wrote a reasonable first draft of the user manual
- elaborated on File | Merge to handle multi-kinemage files when there is no current kinemage
- reworked the tree mechanism so I can start adding functionality
- added 'Toggle visibility' as a tree command
- added 'Delete' as a tree command (buggy)
- changed AbstractGroup and all descendents to *contain* an ArrayList called children,
  rather than be directly descended from ArrayList. This allows us to implement MutableTreeNode
  without naming conflicts.
- ironed (most) bugs out of 'Delete' tree command
- added GridBagPanel for future construction of dialog boxes
- added printing (and thereby, PostScript export). java.awt.print makes this *so* easy -- 10 minutes!
- set minimum size for balls (so they can't disappear when zoomed way out)

### 0.12 ###
- added 'unpickable' property to points and KinReader
- added colorsets: @colorset {colorset_name} mage_color
- added z-translation to default tool and decided 'Alt' and 'Meta' are not viable modifiers
- changed KinReader to allow list name to come anywhere in list line (but a name is REQUIRED before points will be parsed)
- updated icon to a purple 'K'
- added label lists (with 'center' or 'right' options per point)
- added marker lists (with s= style_code per point)
- added triangle lists (shading on ribbonlists remains to be done)
- added shading on ribbon lists for P-L type ribbons but not PT-T type ribbons
- fixed shading to work with PT-T type ribbons in most cases

### 0.11 ###
- Reworked file opening to handle multiple files at once, and files from command line.
- added more info to Help About (Java version, home; gnu.regexp version)
- added icon to MainWindow
- added KingPrefs, which will be expanded in the future
- made balls look more like Mage balls
- added ToolBox and a DefaultTool which has old functions, plus angle & dihedral
- added translation (flatland scroll)
- *finally* added line shortening by balls/spheres to rendering system
  also eliminated drawing of zero-length lines
  performance takes a slight (3-5% ?) hit, but not too bad
- created MarkerPoint and added ability to mark points to the DefaultTool

### 0.10 ###
- improved handling of plain text from kinemages
- added @_span support to KinReader, fixed centering bug
- added most Mage keyboard shortcuts
- added System.exit() call to try and force shutdown in application
- improved quality of line rendering for VectorPoint, etc. at some cost to speed
- added @animation keyword: @animation {anim_name} {master1} {master2} ...
- added 'nobutton' to @master
- fixed a bug in KinReader's handling of r= and w= point parameters
- added Edit | Find point... dialogs using dynamic regexp library
- made Views and Animations menus use radio button symbols
- made search only apply to live points

### 0.09 ###
- altered depth cueing by thickness scheme
- moved file loading to background thread and implemented progress meter
- began Kinglet, the KiNG loader applet
- began text display-and-edit dialog (UIText)
- added shutdown handlers
- began adding pointmasters -- complete. Supports multiple independent masters a-z and 1-6
- added ReflectiveRunnable and reworked thread-handling in KinReader
- added support for animate and 2animate

### 0.08a ###
- restructured KinReader for easier incorporation of new features
- added masters
- added picking of saved views from the menus
- fixed preTransform() to only go if button is on -- this is noticable for kinemages with e.g. 100,000 points.
- increased level of control of rendering -- added Display menu
- updated UI, including 4 new text fields for info display and an edit menu to the tree
- added pickcenter button, for old times' sake ;)

### 0.07a ###
- resumed development work in my spare time
- made transform() traverse the data structure
- made time-critical rendering & transform use get() instead of iterator() -- did this really help?
- started installKinemage() in KingMain -- we're almost ready to use File | Open...
- File | Open works (primitive, but it works)
- rebuilt interface
- more work on File | open/append/close
- added ability to switch among loaded kinemages

### 0.06a ###
- Data model can have its root set and will calculate the size of the object, but this needs some work to be clean.
- Reworked drawing model a bit, storing attribs in the Engine and adding list colors.
- Added partial drawing of lines. It slows us down a measurable amount, but the effect is probably worth it. (?)
- We can work with a full CA trace of the ribosome though at about 10 frames/sec, though we get funny orange specs... what are those, waters?
- Added balllists and dotlists to Kinemage IO. Orange specs are actually pink lines to nowhere that Prekin builds for het groups, like ions.
- Added "point picking" with display of point ID in a label above the kinemage, and simple distance measuring.
- Extended capabilities of KinemageIO. Can now read and display -cass, -cbetadev, -aasc, and (probably) more
- Eliminated what appeared to be a memory leak in KinemageParser relating to StringBuffer.delete()
- Replaced hashCode() in KingList to provide acceptable performance for the tree display...

### 0.05a ###
- enabled data tree to build list of currently visible lists
- added experimental normalization of matrix... causes very odd effects!
- finally got REAL matrix normalization going -- it's basically a matter of normalizing the length
  of each row vector to one, and taking the cross products to insure the row vectors are mutually orthogonal.
- added on/off buttons like Mage has
- added menus, which so far control white background and antialiasing
- coordinated the two 'show markers' commands
- started work on .kin file decoder -- can read in thumbnail.kin (1UBQ from MolProbity)

### 0.04a ###
- added tree display and implemented TreeNode in KingGroup and KingList
- wrote KinemageParser to simplify picking apart kinemages
- added popup menus to tree display
- I missed something, somewhere -- using the original Graphics drawLine() and fillOval() methods
  WITH NO STROKES AND NO ANTIALIASING cut rendering time by a whopping 90%!
- took steps toward unifying the data model, so that events can propagate up and down the tree
- added picking and centering via right mouse pick

### 0.03a ###
- display works and mouse moves the model
- restructured data system for self-drawing points and table models.
- added VectorPoint, DotPoint, and BallPoint
- made depth cueing work
- fixed clipping and zooming to be relative to (1) object size and (2) screen size

### 0.02a ###
- started constructing a real GUI framework, which so far supports zooming the test figure.
- 'turned on' z-buffering (previous logical error)
- fixed one problem with the coordinate system (sign of y), but others still seem to exist...

### 0.01a ###
- made 'shells' of many important classes for data storage and manipulation
- implemented rotation and showed that it works
- implemented z-buffering
- did first rendering test, of a 5 line figure. 10^6 frames in 5.4 sec! 
- un-did threading -- too complicated to coordinate large shared data structures 
- did rendering test w/ Graphics2D and 3 px pen -- as fast or faster (!)
- unbelievably, turning on antialiasing actually seems to SPEED THINGS UP by ~20%

